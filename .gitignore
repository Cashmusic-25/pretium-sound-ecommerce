<<<<<<< HEAD
echo "# Dependencies
node_modules/
.pnp
.pnp.js

# Production
/build
/.next/
/out/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
=======
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
>>>>>>> f3a44a1b4435ea4225fef1da587da2eef1b7aff5

# Runtime data
pids
*.pid
*.seed
*.pid.lock

<<<<<<< HEAD
# Coverage directory used by tools like istanbul
coverage/

# Mac
.DS_Store

# Windows
Thumbs.db

# IDE
.vscode/
.idea/" > .gitignore

# 모든 파일 스테이징
git add .

# 초기 커밋
git commit -m "🎉 Initial commit: Pretium Sound E-commerce Platform

✨ Features:
- Modern Next.js 14 with React 18
- Responsive design with Tailwind CSS
- Complete e-commerce functionality
- Shopping cart and checkout system
- User authentication and profiles
- Product catalog with search/filter
- Order management system
- Admin dashboard with full CRUD
- Review and rating system
- Wishlist functionality

🛠 Tech Stack:
- Next.js 14 (App Router)
- React 18
- Tailwind CSS
- Lucide React Icons
- Local Storage for data persistence

📦 Ready for:
- Toss Payments integration
- Database integration
- Production deployment"

# GitHub 저장소를 원격으로 추가 (본인의 GitHub 사용자명으로 변경)
git remote add origin https://github.com/YOUR_USERNAME/pretium-sound-ecommerce.git

# main 브랜치로 푸시
git branch -M main
git push -u origin main
=======
# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
>>>>>>> f3a44a1b4435ea4225fef1da587da2eef1b7aff5
